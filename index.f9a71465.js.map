{"mappings":"AKAc,MAAA,EACZ,aAAA,CAAe,CAChB,CDAK,MAAO,UAAgB,EAC3B,aAAA,CACE,KAAK,EACP,CACD,CEJa,MAAA,UAAoB,EAChC,aAAA,CACE,KAAK,EACP,CACD,CGJa,MAAA,UAAoB,EAGhC,YACW,CAAS,CACT,CAAS,CACT,CAAY,CACZ,CAAa,CACb,CAAa,CALxB,CAOE,KAAK,GANI,IAAA,CAAA,CAAA,CAAA,EACA,IAAA,CAAA,CAAA,CAAA,EACA,IAAA,CAAA,IAAA,CAAA,EACA,IAAA,CAAA,KAAA,CAAA,EACA,IAAA,CAAA,KAAA,CAAA,EAPX,IAAA,CAAA,QAAA,CAAqB,EAAE,AAUvB,CAEA,UAAU,CAAc,CAAxB,CACE,IAAI,CAAC,QAAA,CAAS,IAAA,CAAK,EACrB,CACD,CCfK,MAAO,EACX,UAAU,CAAc,CAAxB,CACE,MAAO,CAAA,CACT,CAEA,OAAO,CAAkB,CAAE,CAAU,CAAE,CAAU,CAAjD,CACE,MAAM,AAAI,MAAM,kBAClB,CAEA,KAAK,CAA6B,CAAA,CAAG,CACtC,CFPa,MAAA,UAA0B,EAGtC,aAAA,CACE,KAAK,GAHP,IAAA,CAAA,IAAA,CAAO,IAAI,IAKT,SAAS,gBAAA,CAAiB,UAAW,AAAC,IACpC,OAAQ,EAAE,OAAV,EACE,KAAK,GACH,IAAI,CAAC,IAAA,CAAK,GAAA,CAAI,KACd,KACF,MAAK,GACH,IAAI,CAAC,IAAA,CAAK,GAAA,CAAI,KACd,KACF,MAAK,GACH,IAAI,CAAC,IAAA,CAAK,GAAA,CAAI,KACd,KACF,MAAK,GACH,IAAI,CAAC,IAAA,CAAK,GAAA,CAAI,IAEjB,CACH,EACF,CAEA,UAAU,CAAc,CAAxB,CACE,OAAO,aAAkB,CAC3B,CAEA,OAAO,CAAgB,CAAE,CAAU,CAAE,CAAU,CAA/C,CACE,IAAM,EAAa,EAAS,IAAA,CAAK,AAAC,GAChC,EAAK,QAAA,CAAS,IAAA,CAAK,AAAC,GAAW,aAAkB,IAGnD,GAAI,CAAC,EAAY,OAEjB,IAAI,EAAsC,KAEtC,IAAI,CAAC,IAAA,CAAK,GAAA,CAAI,OAChB,EAAa,EAAS,IAAA,CACpB,AAAC,GAAS,EAAK,CAAA,GAAM,EAAW,CAAA,EAAK,EAAK,CAAA,GAAM,EAAW,CAAA,CAAI,GAGjE,IAAI,CAAC,IAAA,CAAK,MAAA,CAAO,MAGf,IAAI,CAAC,IAAA,CAAK,GAAA,CAAI,OAChB,EAAa,EAAS,IAAA,CACpB,AAAC,GAAS,EAAK,CAAA,GAAM,EAAW,CAAA,CAAI,GAAK,EAAK,CAAA,GAAM,EAAW,CADjE,EAIA,IAAI,CAAC,IAAA,CAAK,MAAA,CAAO,MAGf,IAAI,CAAC,IAAA,CAAK,GAAA,CAAI,OAChB,EAAa,EAAS,IAAA,CACpB,AAAC,GAAS,EAAK,CAAA,GAAM,EAAW,CAAA,CAAI,GAAK,EAAK,CAAA,GAAM,EAAW,CADjE,EAIA,IAAI,CAAC,IAAA,CAAK,MAAA,CAAO,MAGf,IAAI,CAAC,IAAA,CAAK,GAAA,CAAI,OAChB,EAAa,EAAS,IAAA,CACpB,AAAC,GAAS,EAAK,CAAA,GAAM,EAAW,CAAA,EAAK,EAAK,CAAA,GAAM,EAAW,CAAA,CAAI,GAGjE,IAAI,CAAC,IAAA,CAAK,MAAA,CAAO,MAGf,IACF,EAAW,SAAA,CAAU,IAAI,GACzB,EAAW,QAAA,CAAW,EAAW,QAAA,CAAS,MAAA,CACxC,AAAC,GAAW,CAAE,CAAA,aAAkB,CAAA,GAGtC,CACD,CIhFa,MAAA,UAAsB,EAGlC,YACW,CAAkC,CAClC,CAAgC,CAF3C,CAIE,KAAK,GAHI,IAAA,CAAA,QAAA,CAAA,EACA,IAAA,CAAA,MAAA,CAAA,EAJX,IAAA,CAAA,UAAA,CAAa,EAOb,CAEA,KAAK,CAA6B,CAAlC,CACE,gBAAgB;AAChB,EAAI,WAAA,CAAc,MAClB,EAAI,SAAJ,GACA,EAAI,MAAA,CAAO,IAAI,CAAC,QAAA,CAAS,CAAA,CAAG,IAAI,CAAC,QAAA,CAAS,CAA1C,EACA,EAAI,MAAA,CAAO,IAAI,CAAC,MAAA,CAAO,CAAA,CAAG,IAAI,CAAC,MAAA,CAAO,CAAtC,EACA,EAAI,MAAJ,EACF,CACD,CClBa,MAAA,EAGZ,aAAA,CAFA,IAAA,CAAA,OAAA,CAAoB,EAAE,AAEP,CAEf,WAAW,GAAG,CAAiB,CAA/B,CACE,IAAI,CAAC,OAAA,CAAQ,IAAA,IAAQ,EACvB,CAEA,OAAO,CAAU,CAAjB,CAIE,IAAK,IAAM,KAHX,QAAQ,GAAA,CAAI,IAAI,CAAC,OAAjB,EACA,IAAI,CAAC,OAAA,CAAU,IAAI,CAAC,OAAA,CAAQ,MAAA,CAAO,AAAC,GAAW,EAAO,UAAA,CAAa,GAE9C,IAAI,CAAC,OAAA,EACxB,EAAO,UAAA,EAAc,CAEzB,CAEA,KAAK,CAA6B,CAAlC,CACE,IAAK,IAAM,KAAU,IAAI,CAAC,OAAA,CACxB,EAAO,IAAA,CAAK,EAEhB,CACD,CFhBK,MAAO,UAAoB,EAiB/B,aAAA,CACE,KAAK,GAjBP,IAAA,CAAA,IAAA,CAAO,IAAI,IACX,IAAA,CAAA,QAAA,CAA4C,KAC5C,IAAA,CAAA,QAAA,CAA4C,KAC5C,IAAA,CAAA,MAAA,CAA0C,KAC1C,IAAA,CAAA,mBAAA,CASW,KACX,IAAA,CAAA,YAAA,CAAe,IAAI,EAMf,SAAS,aAAA,CAAc,eACvB,gBAAA,CAAiB,QAAS,AAAC,IAC3B,IAAI,CAAC,IAAA,CAAK,GAAA,CAAI,YAChB,GAGE,SAAS,aAAA,CAAc,eACvB,gBAAA,CAAiB,YAAa,AAAC,IAC/B,IAAI,CAAC,QAAA,CAAW,CACd,EAAG,EAAE,OAAL,CACA,EAAG,EAAE,OAAL,AACD,CACH,EACF,CAEA,UAAU,CAAc,CAAxB,CACE,OACE,aAAkB,GAClB,CAAA,CACE,EAAO,QAAA,CAAS,IAAA,CACd,AAAC,GAAW,aAAkB,GAAQ,aAAkB,EAIhE,CAEA,OAAO,CAAgB,CAAE,CAAU,CAAE,CAAU,CAA/C,CACE,IAAM,EAAa,EAAS,IAAA,CAAK,AAAC,GAChC,EAAK,QAAA,CAAS,IAAA,CAAK,AAAC,GAAW,aAAkB,IAGnD,GAAI,CAAC,IAEL,IAAI,CAAC,QAAA,CAAW,CACd,EAAG,EAAW,KAAA,CAAQ,EAAW,IAAA,CAAO,EACxC,EAAG,EAAW,KAAA,CAAQ,EAAW,IAAA,CAAO,CACzC,EAEG,CAAC,IAAI,CAAC,QAAA,EAPO,OASjB,IAAM,EAAS,CACb,EAAG,IAAI,CAAC,QAAA,CAAS,CAAA,CAAK,CAAA,EAAW,KAAA,CAAQ,EAAW,IAAA,CAAO,CAAA,EAC3D,EAAG,IAAI,CAAC,QAAA,CAAS,CAAA,CAAK,CAAA,EAAW,KAAA,CAAQ,EAAW,IAAA,CAAO,CAAA,CAC5D,EACK,EAAyB,KAAK,IAAA,CAClC,KAAK,GAAA,CAAI,EAAO,CAAA,CAAG,GAAK,KAAK,GAAA,CAAI,EAAO,CAAA,CAAG,IAEvC,EAAO,CACX,EAAG,EAAO,CAAA,CAAI,EACd,EAAG,EAAO,CAAA,CAAI,CACf,EAEK,EAAY,CAChB,EACE,EAAK,CAAA,CACL,KAAK,IAAA,CAAK,KAAK,GAAA,CAAI,EAAK,SAAA,CAAW,GAAK,KAAK,GAAA,CAAI,EAAK,UAAA,CAAY,IACpE,EACE,EAAK,CAAA,CACL,KAAK,IAAA,CAAK,KAAK,GAAA,CAAI,EAAK,SAAA,CAAW,GAAK,KAAK,GAAA,CAAI,EAAK,UAAA,CAAY,GACrE,CAED,CAAA,IAAI,CAAC,MAAA,CAAS,CACZ,EAAG,IAAI,CAAC,QAAA,CAAS,CAAA,CAAI,EAAU,CAA/B,CACA,EAAG,IAAI,CAAC,QAAA,CAAS,CAAA,CAAI,EAAU,CAA/B,AACD,EAED,IAAM,EAAa,IAAI,CAAC,MAAA,CAAO,CAAA,CACzB,EAAa,IAAI,CAAC,MAAA,CAAO,CAA/B,CACM,EAAa,IAAI,CAAC,QAAA,CAAS,CAAA,CAC3B,EAAa,IAAI,CAAC,QAAA,CAAS,CAAjC,CAEI,EASA,CACF,cAAe,EACf,cAAe,CAChB,EAEK,EAAgB,EAAS,MAAA,CAAO,AAAC,GACrC,EAAK,QAAA,CAAS,IAAA,CAAK,AAAC,GAAW,aAAkB,GApBjB,yCAAwC;AAuB1E,IAAK,IAAM,KAAQ,EAAe,CAChC,IAAM,EAAa,EAAK,KAAA,CAClB,EAAa,EAAK,KAAxB,CACM,EAAa,EAAK,IAAA,CAClB,EAAa,EAAK,IAAxB,CAIM,EAAgB,IAAI,CAAC,QAAA,CAAS,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAPjC,mBAAkB;AASjD,IAAK,IAAM,KAAgB,EAAe,CACxC,IAAM,EAAwB,EAAa,aAAA,CAAgB,EACrD,EAAwB,EAAa,aAAA,CAAgB,EACrD,EAAuB,KAAK,IAAA,CAChC,KAAK,GAAA,CAAI,EAAuB,GAC9B,KAAK,GAAA,CAAI,EAAuB,IAG9B,EACJ,EAAoB,aAAA,CAAgB,EAChC,EACJ,EAAoB,aAAA,CAAgB,EAChC,EAA8B,KAAK,IAAA,CACvC,KAAK,GAAA,CAAI,EAA8B,GACrC,KAAK,GAAA,CAAI,EAA8B,IAGvC,EAAuB,GACzB,CAAA,EAAsB,CACpB,cAAe,EAAa,aAA5B,CACA,cAAe,EAAa,aAA5B,CACA,gBAAiB,CACf,GAAA,EACA,GAAA,EACA,GAAA,EACA,GAAA,CACD,CACF,CAAA,CAGH,2BAA0B;AAC1B,mBAAmB;AACnB,WAAW;AACX,gCAAgC;AAChC,gCAAgC;AAChC,OAAO;AACP,OAAO;AACP,gBAAgB;AAChB,KAAK;AACL,cAAc;AACf,CACF,CAED,IAAI,CAAC,mBAAA,CAAsB,EAEvB,IAAI,CAAC,IAAA,CAAK,GAAA,CAAI,eAChB,IAAI,CAAC,YAAA,CAAa,UAAA,CAChB,IAAI,EACF,CAAE,EAAG,IAAI,CAAC,QAAA,CAAS,CAAjB,CAAoB,EAAG,IAAI,CAAC,QAAA,CAAS,CAAjB,AAAkB,EACxC,CACE,EAAG,IAAI,CAAC,mBAAA,CAAoB,aAA5B,CACA,EAAG,IAAI,CAAC,mBAAA,CAAoB,aAA5B,AACD,IAIL,IAAI,CAAC,IAAA,CAAK,MAAA,CAAO,cAGnB,IAAI,CAAC,YAAA,CAAa,MAAA,CAAO,EAC3B,CAEA,KAAK,CAA6B,CAAlC,CACE,GAAI,IAAI,CAAC,QAAA,EAAY,IAAI,CAAC,MAAA,GACxB,EAAI,SAAA,CAAY,SAChB,EAAI,SAAJ,GACA,EAAI,GAAA,CAAI,IAAI,CAAC,QAAA,CAAS,CAAA,CAAG,IAAI,CAAC,QAAA,CAAS,CAAA,CAAG,EAAG,EAAG,EAAI,KAAK,EAAzD,EACA,EAAI,IAAJ,GAEI,IAAI,CAAC,mBAAA,EAAqB,CAC5B,GAAI,IAAI,CAAC,mBAAA,CAAoB,eAAA,CAAiB,CAC5C,GAAM,CAAA,gBAAE,CAAe,CAAE,CAAG,IAAI,CAAC,mBAAjC,AACA,CAAA,EAAI,SAAA,CAAY,SAChB,EAAI,QAAA,CACF,EAAgB,EAAA,CAChB,EAAgB,EAAA,CAChB,EAAgB,EAAA,CAChB,EAAgB,EAJlB,CAMD,CAED,EAAI,IAAJ,GACA,gBAAgB;AAChB,EAAI,SAAJ,GACA,EAAI,WAAA,CAAY,CAAC,EAAG,GAAG,EACvB,EAAI,MAAA,CAAO,IAAI,CAAC,QAAA,CAAS,CAAA,CAAG,IAAI,CAAC,QAAA,CAAS,CAA1C,EACA,EAAI,MAAA,CACF,IAAI,CAAC,mBAAA,CAAoB,aAAA,CACzB,IAAI,CAAC,mBAAA,CAAoB,aAF3B,EAIA,EAAI,MAAJ,GACA,EAAI,OAAJ,GAEA,wBAAwB;AACxB,EAAI,SAAA,CAAY,MAChB,EAAI,SAAJ,GACA,EAAI,GAAA,CACF,IAAI,CAAC,mBAAA,CAAoB,aAAA,CACzB,IAAI,CAAC,mBAAA,CAAoB,aAAA,CACzB,EACA,EACA,EAAI,KAAK,EALX,EAOA,EAAI,IAAJ,EACD,CAGH,IAAI,CAAC,YAAA,CAAa,IAAA,CAAK,EACzB,CAEA,SACE,CAAU,CACV,CAAU,CACV,CAAU,CACV,CAAU,CACV,CAAU,CACV,CAAU,CACV,CAAU,CACV,CAAU,CARZ,CAUE,yDAAyD;AACzD,oCAAoC;AACpC,IAAM,EAAO,IAAI,CAAC,QAAA,CAAS,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAK,GACtD,EAAQ,IAAI,CAAC,QAAA,CAAS,EAAI,EAAI,EAAI,EAAI,EAAK,EAAI,EAAI,EAAK,EAAI,EAAK,GACjE,EAAM,IAAI,CAAC,QAAA,CAAS,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAK,EAAI,GACrD,EAAS,IAAI,CAAC,QAAA,CAAS,EAAI,EAAI,EAAI,EAAI,EAAI,EAAK,EAAI,EAAK,EAAI,EAAK,GAElE,EAGD,EAAE,CAOP,OALI,GAAM,EAAc,IAAA,CAAK,GACzB,GAAO,EAAc,IAAA,CAAK,GAC1B,GAAK,EAAc,IAAA,CAAK,GACxB,GAAQ,EAAc,IAAA,CAAK,GAExB,CACT,CAEA,SACE,CAAU,CACV,CAAU,CACV,CAAU,CACV,CAAU,CACV,CAAU,CACV,CAAU,CACV,CAAU,CACV,CAAU,CARZ,CAUE,uCAAuC;AACvC,IAAM,EACJ,AAAE,CAAA,AAAA,CAAA,EAAK,CAAA,EAAO,CAAA,EAAK,CAAA,EAAM,AAAC,CAAA,EAAK,CAAA,EAAO,CAAA,EAAK,CAAA,CAAA,EAC1C,CAAA,AAAC,CAAA,EAAK,CAAA,EAAO,CAAA,EAAK,CAAA,EAAO,AAAA,CAAA,EAAK,CAAA,EAAO,CAAA,EAAK,CAAA,CAAA,EACvC,EACJ,AAAE,CAAA,AAAA,CAAA,EAAK,CAAA,EAAO,CAAA,EAAK,CAAA,EAAM,AAAC,CAAA,EAAK,CAAA,EAAO,CAAA,EAAK,CAAA,CAAA,EAC1C,CAAA,AAAC,CAAA,EAAK,CAAA,EAAO,CAAA,EAAK,CAAA,EAAO,AAAA,CAAA,EAAK,CAAA,EAAO,CAAA,EAAK,CAAA,CAAA,SAE7C,oDAAoD;AAChD,GAAM,GAAK,GAAM,GAAK,GAAM,GAAK,GAAM,EAKlC,CAAE,cAHqB,EAAK,EAAM,CAAA,EAAK,CAAA,EAGtB,cAFM,EAAK,EAAM,CAAA,EAAK,CAAA,CAET,EAEhC,KACT,CACD,CJ9RK,MAAO,EAMX,YAAqB,CAAwC,CAA7D,CAAqB,IAAA,CAAA,SAAA,CAAA,EALrB,IAAA,CAAA,OAAA,CAAoB,CAAC,IAAI,EAAe,IAAI,EAAa,CACzD,IAAA,CAAA,KAAA,CAAsB,KACtB,IAAA,CAAA,OAAA,CAAU,EACV,IAAA,CAAA,OAAA,CAAU,CAEsD,CAEhE,WAAW,CAAiB,CAAE,CAAkB,CAAhD,CACE,IAAM,EAAwB,EAAE,CAEhC,IAAI,CAAC,SAAA,CAAU,OAAA,CAAQ,CAAC,EAAK,KAC3B,IAAM,EAAuB,EAAE,CAE/B,EAAI,OAAA,CAAQ,CAAC,EAAU,KACrB,IAAM,EAAW,CACf,EAAG,EACH,EAAG,CACJ,EAQK,EAAkB,AAJtB,CAAA,AAAwB,KAFE,CAAA,EAAY,EAAa,IAAM,GAA3D,EAEgC,EAAY,CAD5C,EAIyB,GAGnB,EAAO,IAAI,EACf,EAAS,CAAA,CACT,EAAS,CAAA,CACT,EACA,EAAkB,EAAS,CAAA,CAC3B,EAAkB,EAAS,CAL7B,CAQiB,QAAb,GACF,CAAA,EAAK,QAAA,CAAW,IAAI,EAAK,QAAL,IAAkB,EAAS,AAAA,EAGjD,EAAa,IAAA,CAAK,EACpB,GAEA,EAAe,IAAA,CAAK,EACtB,GAEA,IAAI,CAAC,KAAA,CAAQ,CACf,CAEA,OAAO,CAAU,CAAE,CAAU,CAA7B,CACE,GAAK,IAAI,CAAC,KAAA,CAEV,IAAK,IAAM,KAAU,IAAI,CAAC,OAAA,CAAS,CACjC,IAAM,EAAmB,IAAI,CAAC,KAAA,CAAM,IAAA,GAAO,MAAA,CAAO,EAAO,SAAzD,EACA,EAAO,MAAA,CAAO,EAAkB,EAAI,EACrC,CACH,CAEA,KAAK,CAA6B,CAAlC,CACE,GAAK,IAAI,CAAC,KAAA,EAEV,IAAK,IAAM,KAAO,IAAI,CAAC,KAAA,CACrB,IAAK,IAAM,KAAQ,EAAK,CACtB,IAAM,EAAe,CACnB,EAAG,EAAK,KAAR,CACA,EAAG,EAAK,KAAR,AACD,EAED,EAAI,SAAJ,GAEI,EAAK,QAAA,CAAS,IAAA,CAAK,AAAC,GAAW,aAAkB,IACnD,EAAI,SAAA,CAAY,OAChB,EAAI,QAAA,CAAS,EAAa,CAAA,CAAG,EAAa,CAAA,CAAG,EAAK,IAAA,CAAM,EAAK,IAA7D,EACA,EAAI,IAAJ,IACS,EAAK,QAAA,CAAS,IAAA,CAAK,AAAC,GAAW,aAAkB,IAC1D,EAAI,SAAA,CAAY,OAChB,EAAI,QAAA,CAAS,EAAa,CAAA,CAAG,EAAa,CAAA,CAAG,EAAK,IAAA,CAAM,EAAK,IAA7D,EACA,EAAI,IAAJ,KAEA,EAAI,WAAA,CAAc,OAClB,EAAI,UAAA,CAAW,EAAa,CAAA,CAAG,EAAa,CAAA,CAAG,EAAK,IAAA,CAAM,EAAK,IAA/D,EACA,EAAI,MAAJ,IAGF,EAAI,SAAJ,EACD,CAGH,IAAK,IAAM,KAAU,IAAI,CAAC,OAAA,CACxB,EAAO,IAAA,CAAK,GAEhB,CACD,CJnGK,MAAO,UAAe,EAC1B,aAAA,CACE,IAAM,EAAY,CAChB,CACE,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACD,CACD,CACE,KACA,KACA,CAAC,IAAI,EAAO,CACZ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,CAAC,IAAI,EAAO,CACZ,KACA,KACD,CACD,CACE,KACA,KACA,CAAC,IAAI,EAAO,CACZ,KACA,KACA,CAAC,IAAI,EAAO,CACZ,CAAC,IAAI,EAAO,CACZ,CAAC,IAAI,EAAO,CACZ,CAAC,IAAI,EAAO,CACZ,CAAC,IAAI,EAAO,CACZ,KACA,KACA,CAAC,IAAI,EAAO,CACZ,KACA,KACD,CACD,CACE,KACA,KACA,CAAC,IAAI,EAAO,CACZ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,CAAC,IAAI,EAAO,CACZ,KACA,KACD,CACD,CACE,KACA,KACA,CAAC,IAAI,EAAO,CACZ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,CAAC,IAAI,EAAO,CACZ,KACA,KACD,CACD,CACE,KACA,KACA,CAAC,IAAI,EAAO,CACZ,KACA,KACA,CAAC,IAAI,EAAO,CACZ,CAAC,IAAI,EAAO,CACZ,CAAC,IAAI,EAAO,CACZ,CAAC,IAAI,EAAO,CACZ,CAAC,IAAI,EAAO,CACZ,KACA,KACA,CAAC,IAAI,EAAO,CACZ,KACA,KACD,CACD,CACE,KACA,KACA,CAAC,IAAI,EAAO,CACZ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,CAAC,IAAI,EAAO,CACZ,KACA,KACD,CACD,CACE,KACA,KACA,KACA,KACA,KACA,KACA,KACA,CAAC,IAAI,EAAU,CACf,KACA,KACA,KACA,KACA,KACA,KACA,KACD,CACF,CAED,KAAK,CAAC,EACR,CACD,CFjJD,MAAM,EAAS,SAAS,aAAA,CAAc,eAChC,EAAM,EAAO,UAAA,CAAW,MAOxB,EAAO,ICNC,MAKZ,YACW,CAAiB,CACjB,CAAkB,CAClB,CAA6B,CAHxC,CACW,IAAA,CAAA,SAAA,CAAA,EACA,IAAA,CAAA,UAAA,CAAA,EACA,IAAA,CAAA,GAAA,CAAA,EAPX,IAAA,CAAA,KAAA,CAAQ,IAAI,EACZ,IAAA,CAAA,OAAA,CAAoB,EAAE,CACtB,IAAA,CAAA,QAAA,CAAqB,EAAE,CAOrB,IAAI,CAAC,KAAL,EACF,CAEA,OAAA,CACE,IAAI,CAAC,KAAA,CAAM,UAAA,CAAW,IAAI,CAAC,SAAA,CAAW,IAAI,CAAC,UAA3C,CACF,CAEA,KAAK,CAA6B,CAAlC,CAGE,IAAK,IAAM,KAFX,IAAI,CAAC,KAAA,CAAM,IAAA,CAAK,GAEK,IAAI,CAAC,OAAA,EACxB,EAAO,IAAA,CAAK,EAEhB,CAEA,OAAO,CAAU,CAAjB,CAGE,IAAK,IAAM,KAFP,IAAI,CAAC,KAAA,CAAM,KAAA,EAAO,IAAI,CAAC,KAAA,CAAM,MAAA,CAAO,EAAI,IAAI,EAE3B,IAAI,CAAC,OAAA,EAAS,CACjC,IAAM,EAAmB,IAAI,CAAC,QAAA,CAAS,MAAA,CAAO,EAAO,SAArD,EACA,EAAO,MAAA,CAAO,EAAkB,EAAI,IAAI,CACzC,CACH,CACD,ED9BkB,IACC,IAE2B,GAE/C,IAAI,EAAuB,EAe3B,sBAbA,SAAS,EAAS,CAAiB,EACjC,gBAAgB;AAChB,IAAI,EAAK,AAAC,CAAA,EAAY,CAAA,EAAgB,IACtC,EAAe,EAEf,EAAI,SAAA,CAAU,EAAG,EAZA,IACC,KAalB,EAAK,MAAA,CAAO,GACZ,EAAK,IAAA,CAAK,GAEV,sBAAsB,EACxB,E,4D","sources":["<anon>","src/main.ts","src/game.ts","src/Level/Level1.ts","src/Entity/Player1.ts","src/Entity/Entity.ts","src/Entity/Wall.ts","src/Level/Level.ts","src/System/MoveSystem.ts","src/Level/Cell.ts","src/System/System.ts","src/System/ShootSystem.ts","src/Entity/Bullet.ts","src/System/BulletSystem.ts"],"sourcesContent":["class $4a5f60612504c761$export$2e2bcd8739ae039 {\n    constructor(){}\n}\n\n\nclass $c4a2ebb6152c7bea$export$5c761481ae48d9f2 extends (0, $4a5f60612504c761$export$2e2bcd8739ae039) {\n    constructor(){\n        super();\n    }\n}\n\n\n\nclass $81a81278a352112e$export$2e2bcd8739ae039 extends (0, $4a5f60612504c761$export$2e2bcd8739ae039) {\n    constructor(){\n        super();\n    }\n}\n\n\n\n\n\n\nclass $ad61a8af9eafef66$export$2e2bcd8739ae039 extends (0, $4a5f60612504c761$export$2e2bcd8739ae039) {\n    constructor(x, y, size, drawX, drawY){\n        super();\n        this.x = x;\n        this.y = y;\n        this.size = size;\n        this.drawX = drawX;\n        this.drawY = drawY;\n        this.entities = [];\n    }\n    addEntity(entity) {\n        this.entities.push(entity);\n    }\n}\n\n\nclass $f8f0a71d1ac2e862$export$e1dae5660003ffa7 {\n    appliesTo(entity) {\n        return false;\n    }\n    update(entities, dt, game) {\n        throw new Error(\"not implemented\");\n    }\n    draw(ctx) {}\n}\n\n\nclass $bbb92fe6a838daab$export$2e2bcd8739ae039 extends (0, $f8f0a71d1ac2e862$export$e1dae5660003ffa7) {\n    constructor(){\n        super();\n        this.keys = new Set();\n        document.addEventListener(\"keydown\", (e)=>{\n            switch(e.keyCode){\n                case 87:\n                    this.keys.add(\"w\");\n                    break;\n                case 65:\n                    this.keys.add(\"a\");\n                    break;\n                case 83:\n                    this.keys.add(\"d\");\n                    break;\n                case 68:\n                    this.keys.add(\"s\");\n                    break;\n            }\n        });\n    }\n    appliesTo(entity) {\n        return entity instanceof (0, $ad61a8af9eafef66$export$2e2bcd8739ae039);\n    }\n    update(entities, dt, game) {\n        const playerCell = entities.find((cell)=>cell.entities.find((entity)=>entity instanceof (0, $c4a2ebb6152c7bea$export$5c761481ae48d9f2)));\n        if (!playerCell) return;\n        let moveToCell = null;\n        if (this.keys.has(\"w\")) {\n            moveToCell = entities.find((cell)=>cell.x === playerCell.x && cell.y === playerCell.y - 1);\n            this.keys.delete(\"w\");\n        }\n        if (this.keys.has(\"a\")) {\n            moveToCell = entities.find((cell)=>cell.x === playerCell.x - 1 && cell.y === playerCell.y);\n            this.keys.delete(\"a\");\n        }\n        if (this.keys.has(\"s\")) {\n            moveToCell = entities.find((cell)=>cell.x === playerCell.x + 1 && cell.y === playerCell.y);\n            this.keys.delete(\"s\");\n        }\n        if (this.keys.has(\"d\")) {\n            moveToCell = entities.find((cell)=>cell.x === playerCell.x && cell.y === playerCell.y + 1);\n            this.keys.delete(\"d\");\n        }\n        if (moveToCell) {\n            moveToCell.addEntity(new (0, $c4a2ebb6152c7bea$export$5c761481ae48d9f2)());\n            playerCell.entities = playerCell.entities.filter((entity)=>!(entity instanceof (0, $c4a2ebb6152c7bea$export$5c761481ae48d9f2)));\n        }\n    }\n}\n\n\n\nclass $6b28eae97cf53d15$export$2e2bcd8739ae039 extends (0, $4a5f60612504c761$export$2e2bcd8739ae039) {\n    constructor(startPos, endPos){\n        super();\n        this.startPos = startPos;\n        this.endPos = endPos;\n        this.lifeLength = 0.5; // seconds\n    }\n    draw(ctx) {\n        // draw the line\n        ctx.strokeStyle = \"red\";\n        ctx.beginPath();\n        ctx.moveTo(this.startPos.x, this.startPos.y);\n        ctx.lineTo(this.endPos.x, this.endPos.y);\n        ctx.stroke();\n    }\n}\n\n\n\n\n\nclass $ca622784e3b66859$export$2e2bcd8739ae039 {\n    constructor(){\n        this.bullets = [];\n    }\n    addBullets(...bullets) {\n        this.bullets.push(...bullets);\n    }\n    update(dt) {\n        console.log(this.bullets);\n        this.bullets = this.bullets.filter((bullet)=>bullet.lifeLength > 0);\n        for (const bullet of this.bullets)bullet.lifeLength -= dt;\n    }\n    draw(ctx) {\n        for (const bullet of this.bullets)bullet.draw(ctx);\n    }\n}\n\n\n\nclass $8720f1b93daaaf0d$export$ca8fcbfa0c11ecda extends (0, $f8f0a71d1ac2e862$export$e1dae5660003ffa7) {\n    constructor(){\n        super();\n        this.keys = new Set();\n        this.mousePos = null;\n        this.startPos = null;\n        this.aimPos = null;\n        this.nearestIntersection = null;\n        this.bulletSystem = new (0, $ca622784e3b66859$export$2e2bcd8739ae039)();\n        document.querySelector(\"#gameScreen\").addEventListener(\"click\", (e)=>{\n            this.keys.add(\"leftClick\");\n        });\n        document.querySelector(\"#gameScreen\").addEventListener(\"mousemove\", (e)=>{\n            this.mousePos = {\n                x: e.offsetX,\n                y: e.offsetY\n            };\n        });\n    }\n    appliesTo(entity) {\n        return entity instanceof (0, $ad61a8af9eafef66$export$2e2bcd8739ae039) && Boolean(entity.entities.find((entity)=>entity instanceof (0, $81a81278a352112e$export$2e2bcd8739ae039) || entity instanceof (0, $c4a2ebb6152c7bea$export$5c761481ae48d9f2)));\n    }\n    update(entities, dt, game) {\n        const playerCell = entities.find((cell)=>cell.entities.find((entity)=>entity instanceof (0, $c4a2ebb6152c7bea$export$5c761481ae48d9f2)));\n        if (!playerCell) return;\n        this.startPos = {\n            x: playerCell.drawX + playerCell.size / 2,\n            y: playerCell.drawY + playerCell.size / 2\n        };\n        if (!this.mousePos) return;\n        const vector = {\n            x: this.mousePos.x - (playerCell.drawX + playerCell.size / 2),\n            y: this.mousePos.y - (playerCell.drawY + playerCell.size / 2)\n        };\n        const mousePosBasedMagnitude = Math.sqrt(Math.pow(vector.x, 2) + Math.pow(vector.y, 2));\n        const norm = {\n            x: vector.x / mousePosBasedMagnitude,\n            y: vector.y / mousePosBasedMagnitude\n        };\n        const magnitude = {\n            x: norm.x * Math.sqrt(Math.pow(game.gameWidth, 2) + Math.pow(game.gameHeight, 2)),\n            y: norm.y * Math.sqrt(Math.pow(game.gameWidth, 2) + Math.pow(game.gameHeight, 2))\n        };\n        this.aimPos = {\n            x: this.startPos.x + magnitude.x,\n            y: this.startPos.y + magnitude.y\n        };\n        const x1 = this.aimPos.x; // points for line (controlled by mouse)\n        const y1 = this.aimPos.y;\n        const x2 = this.startPos.x; // static point\n        const y2 = this.startPos.y;\n        let nearestIntersection = {\n            intersectionX: x1,\n            intersectionY: y1\n        };\n        const obstacleCells = entities.filter((cell)=>cell.entities.find((entity)=>entity instanceof (0, $81a81278a352112e$export$2e2bcd8739ae039)));\n        for (const cell of obstacleCells){\n            const sx = cell.drawX; // square position\n            const sy = cell.drawY;\n            const sw = cell.size; // and size\n            const sh = cell.size;\n            // check if line has hit the square\n            // if so, change the fill color\n            const intersections = this.lineRect(x1, y1, x2, y2, sx, sy, sw, sh);\n            for (const intersection of intersections){\n                const intersectionDistanceX = intersection.intersectionX - x2;\n                const intersectionDistanceY = intersection.intersectionY - y2;\n                const intersectionDistance = Math.sqrt(Math.pow(intersectionDistanceX, 2) + Math.pow(intersectionDistanceY, 2));\n                const nearestIntersectionDistanceX = nearestIntersection.intersectionX - x2;\n                const nearestIntersectionDistanceY = nearestIntersection.intersectionY - y2;\n                const nearestIntersectionDistance = Math.sqrt(Math.pow(nearestIntersectionDistanceX, 2) + Math.pow(nearestIntersectionDistanceY, 2));\n                if (intersectionDistance < nearestIntersectionDistance) nearestIntersection = {\n                    intersectionX: intersection.intersectionX,\n                    intersectionY: intersection.intersectionY,\n                    intersectedRect: {\n                        sx: sx,\n                        sy: sy,\n                        sw: sw,\n                        sh: sh\n                    }\n                };\n            // ctx.fillStyle = \"blue\";\n            // ctx.beginPath();\n            // ctx.arc(\n            //   intersection.intersectionX,\n            //   intersection.intersectionY,\n            //   5,\n            //   0,\n            //   2 * Math.PI\n            // );\n            // ctx.fill();\n            }\n        }\n        this.nearestIntersection = nearestIntersection;\n        if (this.keys.has(\"leftClick\")) {\n            this.bulletSystem.addBullets(new (0, $6b28eae97cf53d15$export$2e2bcd8739ae039)({\n                x: this.startPos.x,\n                y: this.startPos.y\n            }, {\n                x: this.nearestIntersection.intersectionX,\n                y: this.nearestIntersection.intersectionY\n            }));\n            this.keys.delete(\"leftClick\");\n        }\n        this.bulletSystem.update(dt);\n    }\n    draw(ctx) {\n        if (this.startPos && this.aimPos) {\n            ctx.fillStyle = \"orange\";\n            ctx.beginPath();\n            ctx.arc(this.startPos.x, this.startPos.y, 5, 0, 2 * Math.PI);\n            ctx.fill();\n            if (this.nearestIntersection) {\n                if (this.nearestIntersection.intersectedRect) {\n                    const { intersectedRect: intersectedRect } = this.nearestIntersection;\n                    ctx.fillStyle = \"orange\";\n                    ctx.fillRect(intersectedRect.sx, intersectedRect.sy, intersectedRect.sw, intersectedRect.sh);\n                }\n                ctx.save();\n                // draw the line\n                ctx.beginPath();\n                ctx.setLineDash([\n                    5,\n                    15\n                ]);\n                ctx.moveTo(this.startPos.x, this.startPos.y);\n                ctx.lineTo(this.nearestIntersection.intersectionX, this.nearestIntersection.intersectionY);\n                ctx.stroke();\n                ctx.restore();\n                // draw intersection dot\n                ctx.fillStyle = \"red\";\n                ctx.beginPath();\n                ctx.arc(this.nearestIntersection.intersectionX, this.nearestIntersection.intersectionY, 5, 0, 2 * Math.PI);\n                ctx.fill();\n            }\n        }\n        this.bulletSystem.draw(ctx);\n    }\n    lineRect(x1, y1, x2, y2, rx, ry, rw, rh) {\n        // check if the line has hit any of the rectangle's sides\n        // uses the Line/Line function below\n        const left = this.lineLine(x1, y1, x2, y2, rx, ry, rx, ry + rh);\n        const right = this.lineLine(x1, y1, x2, y2, rx + rw, ry, rx + rw, ry + rh);\n        const top = this.lineLine(x1, y1, x2, y2, rx, ry, rx + rw, ry);\n        const bottom = this.lineLine(x1, y1, x2, y2, rx, ry + rh, rx + rw, ry + rh);\n        const intersections = [];\n        if (left) intersections.push(left);\n        if (right) intersections.push(right);\n        if (top) intersections.push(top);\n        if (bottom) intersections.push(bottom);\n        return intersections;\n    }\n    lineLine(x1, y1, x2, y2, x3, y3, x4, y4) {\n        // calculate the direction of the lines\n        const uA = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n        const uB = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n        // if uA and uB are between 0-1, lines are colliding\n        if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n            // where the lines meet\n            const intersectionX = x1 + uA * (x2 - x1);\n            const intersectionY = y1 + uA * (y2 - y1);\n            return {\n                intersectionX: intersectionX,\n                intersectionY: intersectionY\n            };\n        }\n        return null;\n    }\n}\n\n\n\nclass $256d25c9dd37b357$export$ca664994d1d54bff {\n    constructor(structure){\n        this.structure = structure;\n        this.systems = [\n            new (0, $8720f1b93daaaf0d$export$ca8fcbfa0c11ecda)(),\n            new (0, $bbb92fe6a838daab$export$2e2bcd8739ae039)()\n        ];\n        this.board = null;\n        this.offsetX = 0;\n        this.offsetY = 0;\n    }\n    buildLevel(gameWidth, gameHeight) {\n        const generatedBoard = [];\n        this.structure.forEach((row, rowIndex)=>{\n            const generatedRow = [];\n            row.forEach((obstacle, obstacleIndex)=>{\n                const position = {\n                    x: obstacleIndex,\n                    y: rowIndex\n                };\n                const minimumGameSizeAxis = gameWidth < gameHeight ? \"x\" : \"y\";\n                const minimumGameSize = minimumGameSizeAxis === \"x\" ? gameWidth : gameHeight;\n                const maximumBoardSizeAxis = \"x\";\n                const maximumBoardSize = 15; // Don't hardcode this!!!\n                const maximumCellSize = minimumGameSize / maximumBoardSize;\n                const cell = new (0, $ad61a8af9eafef66$export$2e2bcd8739ae039)(position.x, position.y, maximumCellSize, maximumCellSize * position.x, maximumCellSize * position.y);\n                if (obstacle !== null) cell.entities = [\n                    ...cell.entities,\n                    ...obstacle\n                ];\n                generatedRow.push(cell);\n            });\n            generatedBoard.push(generatedRow);\n        });\n        this.board = generatedBoard;\n    }\n    update(dt, game) {\n        if (!this.board) return;\n        for (const system of this.systems){\n            const filteredEntities = this.board.flat().filter(system.appliesTo);\n            system.update(filteredEntities, dt, game);\n        }\n    }\n    draw(ctx) {\n        if (!this.board) return;\n        for (const row of this.board)for (const cell of row){\n            const drawPosition = {\n                x: cell.drawX,\n                y: cell.drawY\n            };\n            ctx.beginPath();\n            if (cell.entities.find((entity)=>entity instanceof (0, $81a81278a352112e$export$2e2bcd8739ae039))) {\n                ctx.fillStyle = \"#000\";\n                ctx.fillRect(drawPosition.x, drawPosition.y, cell.size, cell.size);\n                ctx.fill();\n            } else if (cell.entities.find((entity)=>entity instanceof (0, $c4a2ebb6152c7bea$export$5c761481ae48d9f2))) {\n                ctx.fillStyle = \"#543\";\n                ctx.fillRect(drawPosition.x, drawPosition.y, cell.size, cell.size);\n                ctx.fill();\n            } else {\n                ctx.strokeStyle = \"#000\";\n                ctx.strokeRect(drawPosition.x, drawPosition.y, cell.size, cell.size);\n                ctx.stroke();\n            }\n            ctx.closePath();\n        }\n        for (const system of this.systems)system.draw(ctx);\n    }\n}\n\n\nclass $2fb686134af45adc$export$2e720d0366b6ecb3 extends (0, $256d25c9dd37b357$export$ca664994d1d54bff) {\n    constructor(){\n        const structure = [\n            [\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                null,\n                null,\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                null,\n                null,\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                null,\n                null,\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                null,\n                null,\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                [\n                    new (0, $81a81278a352112e$export$2e2bcd8739ae039)()\n                ],\n                null,\n                null\n            ],\n            [\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                [\n                    new (0, $c4a2ebb6152c7bea$export$5c761481ae48d9f2)()\n                ],\n                null,\n                null,\n                null,\n                null,\n                null,\n                null,\n                null\n            ]\n        ];\n        super(structure);\n    }\n}\n\n\nclass $6e33178611e38e36$export$2e2bcd8739ae039 {\n    constructor(gameWidth, gameHeight, ctx){\n        this.gameWidth = gameWidth;\n        this.gameHeight = gameHeight;\n        this.ctx = ctx;\n        this.level = new (0, $2fb686134af45adc$export$2e720d0366b6ecb3)();\n        this.systems = [];\n        this.entities = [];\n        this.start();\n    }\n    start() {\n        this.level.buildLevel(this.gameWidth, this.gameHeight);\n    }\n    draw(ctx) {\n        this.level.draw(ctx);\n        for (const system of this.systems)system.draw(ctx);\n    }\n    update(dt) {\n        if (this.level.board) this.level.update(dt, this);\n        for (const system of this.systems){\n            const filteredEntities = this.entities.filter(system.appliesTo);\n            system.update(filteredEntities, dt, this);\n        }\n    }\n}\n\n\nconst $46b0125df3b201f4$var$canvas = document.querySelector(\"#gameScreen\");\nconst $46b0125df3b201f4$var$ctx = $46b0125df3b201f4$var$canvas.getContext(\"2d\");\n// ctx.imageSmoothingEnabled = true;\n// ctx.imageSmoothingQuality = \"high\";\nconst $46b0125df3b201f4$var$GAME_WIDTH = 800;\nconst $46b0125df3b201f4$var$GAME_HEIGHT = 800;\nconst $46b0125df3b201f4$var$game = new (0, $6e33178611e38e36$export$2e2bcd8739ae039)($46b0125df3b201f4$var$GAME_WIDTH, $46b0125df3b201f4$var$GAME_HEIGHT, $46b0125df3b201f4$var$ctx);\nlet $46b0125df3b201f4$var$oldTimeStamp = 0;\nfunction $46b0125df3b201f4$var$gameLoop(timestamp) {\n    // dt i sekunder\n    let dt = (timestamp - $46b0125df3b201f4$var$oldTimeStamp) / 1000;\n    $46b0125df3b201f4$var$oldTimeStamp = timestamp;\n    $46b0125df3b201f4$var$ctx.clearRect(0, 0, $46b0125df3b201f4$var$GAME_WIDTH, $46b0125df3b201f4$var$GAME_HEIGHT);\n    $46b0125df3b201f4$var$game.update(dt);\n    $46b0125df3b201f4$var$game.draw($46b0125df3b201f4$var$ctx);\n    requestAnimationFrame($46b0125df3b201f4$var$gameLoop);\n}\nrequestAnimationFrame($46b0125df3b201f4$var$gameLoop);\n\n\n//# sourceMappingURL=index.f9a71465.js.map\n","import Game from \"./game\";\n\nconst canvas = document.querySelector(\"#gameScreen\") as HTMLCanvasElement;\nconst ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n// ctx.imageSmoothingEnabled = true;\n// ctx.imageSmoothingQuality = \"high\";\n\nconst GAME_WIDTH = 800;\nconst GAME_HEIGHT = 800;\n\nconst game = new Game(GAME_WIDTH, GAME_HEIGHT, ctx);\n\nlet oldTimeStamp: number = 0;\n\nfunction gameLoop(timestamp: number) {\n  // dt i sekunder\n  let dt = (timestamp - oldTimeStamp) / 1000;\n  oldTimeStamp = timestamp;\n\n  ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n\n  game.update(dt);\n  game.draw(ctx);\n\n  requestAnimationFrame(gameLoop);\n}\n\nrequestAnimationFrame(gameLoop);\n","import Entity from \"./Entity/Entity\";\nimport { Level1 } from \"./Level/Level1\";\nimport { System } from \"./System/System\";\n\nexport default class Game {\n  level = new Level1();\n  systems: System[] = [];\n  entities: Entity[] = [];\n\n  constructor(\n    readonly gameWidth: number,\n    readonly gameHeight: number,\n    readonly ctx: CanvasRenderingContext2D\n  ) {\n    this.start();\n  }\n\n  start() {\n    this.level.buildLevel(this.gameWidth, this.gameHeight);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    this.level.draw(ctx);\n\n    for (const system of this.systems) {\n      system.draw(ctx);\n    }\n  }\n\n  update(dt: number) {\n    if (this.level.board) this.level.update(dt, this);\n\n    for (const system of this.systems) {\n      const filteredEntities = this.entities.filter(system.appliesTo);\n      system.update(filteredEntities, dt, this);\n    }\n  }\n}\n","import { Player1 } from \"../Entity/Player1\";\nimport Wall from \"../Entity/Wall\";\nimport { Level } from \"./Level\";\n\nexport class Level1 extends Level {\n  constructor() {\n    const structure = [\n      [\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n      ],\n      [\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n      ],\n      [\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n        [new Wall()],\n        [new Wall()],\n        [new Wall()],\n        [new Wall()],\n        [new Wall()],\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n      ],\n      [\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n      ],\n      [\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n      ],\n      [\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n        [new Wall()],\n        [new Wall()],\n        [new Wall()],\n        [new Wall()],\n        [new Wall()],\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n      ],\n      [\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n      ],\n      [\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        [new Player1()],\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n      ],\n    ];\n\n    super(structure);\n  }\n}\n","import Entity from \"./Entity\";\n\nexport class Player1 extends Entity {\n  constructor() {\n    super();\n  }\n}\n","export default class Entity {\n  constructor() {}\n}\n","import Entity from \"./Entity\";\n\nexport default class Wall extends Entity {\n  constructor() {\n    super();\n  }\n}\n","import Entity from \"../Entity/Entity\";\nimport { Player1 } from \"../Entity/Player1\";\nimport Wall from \"../Entity/Wall\";\nimport MoveSystem from \"../System/MoveSystem\";\nimport { ShootSystem } from \"../System/ShootSystem\";\nimport { System } from \"../System/System\";\nimport Game from \"../game\";\nimport Cell from \"./Cell\";\n\ntype Board = Array<Array<Cell>>;\n\nexport class Level {\n  systems: System[] = [new ShootSystem(), new MoveSystem()];\n  board: Board | null = null;\n  offsetX = 0;\n  offsetY = 0;\n\n  constructor(readonly structure: Array<Array<Entity[] | null>>) {}\n\n  buildLevel(gameWidth: number, gameHeight: number) {\n    const generatedBoard: Board = [];\n\n    this.structure.forEach((row, rowIndex) => {\n      const generatedRow: Cell[] = [];\n\n      row.forEach((obstacle, obstacleIndex) => {\n        const position = {\n          x: obstacleIndex,\n          y: rowIndex,\n        };\n\n        const minimumGameSizeAxis = gameWidth < gameHeight ? \"x\" : \"y\";\n        const minimumGameSize =\n          minimumGameSizeAxis === \"x\" ? gameWidth : gameHeight;\n\n        const maximumBoardSizeAxis = \"x\";\n        const maximumBoardSize = 15; // Don't hardcode this!!!\n        const maximumCellSize = minimumGameSize / maximumBoardSize;\n\n        const cell = new Cell(\n          position.x,\n          position.y,\n          maximumCellSize,\n          maximumCellSize * position.x,\n          maximumCellSize * position.y\n        );\n\n        if (obstacle !== null) {\n          cell.entities = [...cell.entities, ...obstacle];\n        }\n\n        generatedRow.push(cell);\n      });\n\n      generatedBoard.push(generatedRow);\n    });\n\n    this.board = generatedBoard;\n  }\n\n  update(dt: number, game: Game) {\n    if (!this.board) return;\n\n    for (const system of this.systems) {\n      const filteredEntities = this.board.flat().filter(system.appliesTo);\n      system.update(filteredEntities, dt, game);\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    if (!this.board) return;\n\n    for (const row of this.board) {\n      for (const cell of row) {\n        const drawPosition = {\n          x: cell.drawX,\n          y: cell.drawY,\n        };\n\n        ctx.beginPath();\n\n        if (cell.entities.find((entity) => entity instanceof Wall)) {\n          ctx.fillStyle = \"#000\";\n          ctx.fillRect(drawPosition.x, drawPosition.y, cell.size, cell.size);\n          ctx.fill();\n        } else if (cell.entities.find((entity) => entity instanceof Player1)) {\n          ctx.fillStyle = \"#543\";\n          ctx.fillRect(drawPosition.x, drawPosition.y, cell.size, cell.size);\n          ctx.fill();\n        } else {\n          ctx.strokeStyle = \"#000\";\n          ctx.strokeRect(drawPosition.x, drawPosition.y, cell.size, cell.size);\n          ctx.stroke();\n        }\n\n        ctx.closePath();\n      }\n    }\n\n    for (const system of this.systems) {\n      system.draw(ctx);\n    }\n  }\n}\n","import Entity from \"../Entity/Entity\";\nimport { Player1 } from \"../Entity/Player1\";\nimport Cell from \"../Level/Cell\";\nimport Game from \"../game\";\nimport { System } from \"./System\";\n\nexport default class MoveSystem extends System {\n  keys = new Set<\"w\" | \"a\" | \"s\" | \"d\">();\n\n  constructor() {\n    super();\n\n    document.addEventListener(\"keydown\", (e) => {\n      switch (e.keyCode) {\n        case 87:\n          this.keys.add(\"w\");\n          break;\n        case 65:\n          this.keys.add(\"a\");\n          break;\n        case 83:\n          this.keys.add(\"d\");\n          break;\n        case 68:\n          this.keys.add(\"s\");\n          break;\n      }\n    });\n  }\n\n  appliesTo(entity: Entity) {\n    return entity instanceof Cell;\n  }\n\n  update(entities: Cell[], dt: number, game: Game) {\n    const playerCell = entities.find((cell) =>\n      cell.entities.find((entity) => entity instanceof Player1)\n    );\n\n    if (!playerCell) return;\n\n    let moveToCell: Cell | undefined | null = null;\n\n    if (this.keys.has(\"w\")) {\n      moveToCell = entities.find(\n        (cell) => cell.x === playerCell.x && cell.y === playerCell.y - 1\n      );\n\n      this.keys.delete(\"w\");\n    }\n\n    if (this.keys.has(\"a\")) {\n      moveToCell = entities.find(\n        (cell) => cell.x === playerCell.x - 1 && cell.y === playerCell.y\n      );\n\n      this.keys.delete(\"a\");\n    }\n\n    if (this.keys.has(\"s\")) {\n      moveToCell = entities.find(\n        (cell) => cell.x === playerCell.x + 1 && cell.y === playerCell.y\n      );\n\n      this.keys.delete(\"s\");\n    }\n\n    if (this.keys.has(\"d\")) {\n      moveToCell = entities.find(\n        (cell) => cell.x === playerCell.x && cell.y === playerCell.y + 1\n      );\n\n      this.keys.delete(\"d\");\n    }\n\n    if (moveToCell) {\n      moveToCell.addEntity(new Player1());\n      playerCell.entities = playerCell.entities.filter(\n        (entity) => !(entity instanceof Player1)\n      );\n    }\n  }\n}\n","import Entity from \"../Entity/Entity\";\n\nexport default class Cell extends Entity {\n  entities: Entity[] = [];\n\n  constructor(\n    readonly x: number,\n    readonly y: number,\n    readonly size: number,\n    readonly drawX: number,\n    readonly drawY: number\n  ) {\n    super();\n  }\n\n  addEntity(entity: Entity) {\n    this.entities.push(entity);\n  }\n}\n","import Entity from \"../Entity/Entity\";\nimport Game from \"../game\";\n\nexport class System {\n  appliesTo(entity: Entity) {\n    return false;\n  }\n\n  update(entities: Entity[], dt: number, game: Game) {\n    throw new Error(\"not implemented\");\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {}\n}\n","import Bullet from \"../Entity/Bullet\";\nimport Entity from \"../Entity/Entity\";\nimport { Player1 } from \"../Entity/Player1\";\nimport Wall from \"../Entity/Wall\";\nimport Cell from \"../Level/Cell\";\nimport Game from \"../game\";\nimport BulletSystem from \"./BulletSystem\";\nimport { System } from \"./System\";\n\nexport class ShootSystem extends System {\n  keys = new Set<\"leftClick\">();\n  mousePos: { x: number; y: number } | null = null;\n  startPos: { x: number; y: number } | null = null;\n  aimPos: { x: number; y: number } | null = null;\n  nearestIntersection: {\n    intersectionX: number;\n    intersectionY: number;\n    intersectedRect?: {\n      sx: number;\n      sy: number;\n      sw: number;\n      sh: number;\n    };\n  } | null = null;\n  bulletSystem = new BulletSystem();\n\n  constructor() {\n    super();\n\n    (\n      document.querySelector(\"#gameScreen\") as HTMLCanvasElement\n    ).addEventListener(\"click\", (e) => {\n      this.keys.add(\"leftClick\");\n    });\n\n    (\n      document.querySelector(\"#gameScreen\") as HTMLCanvasElement\n    ).addEventListener(\"mousemove\", (e) => {\n      this.mousePos = {\n        x: e.offsetX,\n        y: e.offsetY,\n      };\n    });\n  }\n\n  appliesTo(entity: Entity) {\n    return (\n      entity instanceof Cell &&\n      Boolean(\n        entity.entities.find(\n          (entity) => entity instanceof Wall || entity instanceof Player1\n        )\n      )\n    );\n  }\n\n  update(entities: Cell[], dt: number, game: Game) {\n    const playerCell = entities.find((cell) =>\n      cell.entities.find((entity) => entity instanceof Player1)\n    );\n\n    if (!playerCell) return;\n\n    this.startPos = {\n      x: playerCell.drawX + playerCell.size / 2,\n      y: playerCell.drawY + playerCell.size / 2,\n    };\n\n    if (!this.mousePos) return;\n\n    const vector = {\n      x: this.mousePos.x - (playerCell.drawX + playerCell.size / 2),\n      y: this.mousePos.y - (playerCell.drawY + playerCell.size / 2),\n    };\n    const mousePosBasedMagnitude = Math.sqrt(\n      Math.pow(vector.x, 2) + Math.pow(vector.y, 2)\n    );\n    const norm = {\n      x: vector.x / mousePosBasedMagnitude,\n      y: vector.y / mousePosBasedMagnitude,\n    };\n\n    const magnitude = {\n      x:\n        norm.x *\n        Math.sqrt(Math.pow(game.gameWidth, 2) + Math.pow(game.gameHeight, 2)),\n      y:\n        norm.y *\n        Math.sqrt(Math.pow(game.gameWidth, 2) + Math.pow(game.gameHeight, 2)),\n    };\n\n    this.aimPos = {\n      x: this.startPos.x + magnitude.x,\n      y: this.startPos.y + magnitude.y,\n    };\n\n    const x1: number = this.aimPos.x; // points for line (controlled by mouse)\n    const y1: number = this.aimPos.y;\n    const x2: number = this.startPos.x; // static point\n    const y2: number = this.startPos.y;\n\n    let nearestIntersection: {\n      intersectionX: number;\n      intersectionY: number;\n      intersectedRect?: {\n        sx: number;\n        sy: number;\n        sw: number;\n        sh: number;\n      };\n    } = {\n      intersectionX: x1,\n      intersectionY: y1,\n    };\n\n    const obstacleCells = entities.filter((cell) =>\n      cell.entities.find((entity) => entity instanceof Wall)\n    );\n\n    for (const cell of obstacleCells) {\n      const sx: number = cell.drawX; // square position\n      const sy: number = cell.drawY;\n      const sw: number = cell.size; // and size\n      const sh: number = cell.size;\n\n      // check if line has hit the square\n      // if so, change the fill color\n      const intersections = this.lineRect(x1, y1, x2, y2, sx, sy, sw, sh);\n\n      for (const intersection of intersections) {\n        const intersectionDistanceX = intersection.intersectionX - x2;\n        const intersectionDistanceY = intersection.intersectionY - y2;\n        const intersectionDistance = Math.sqrt(\n          Math.pow(intersectionDistanceX, 2) +\n            Math.pow(intersectionDistanceY, 2)\n        );\n\n        const nearestIntersectionDistanceX =\n          nearestIntersection.intersectionX - x2;\n        const nearestIntersectionDistanceY =\n          nearestIntersection.intersectionY - y2;\n        const nearestIntersectionDistance = Math.sqrt(\n          Math.pow(nearestIntersectionDistanceX, 2) +\n            Math.pow(nearestIntersectionDistanceY, 2)\n        );\n\n        if (intersectionDistance < nearestIntersectionDistance) {\n          nearestIntersection = {\n            intersectionX: intersection.intersectionX,\n            intersectionY: intersection.intersectionY,\n            intersectedRect: {\n              sx,\n              sy,\n              sw,\n              sh,\n            },\n          };\n        }\n\n        // ctx.fillStyle = \"blue\";\n        // ctx.beginPath();\n        // ctx.arc(\n        //   intersection.intersectionX,\n        //   intersection.intersectionY,\n        //   5,\n        //   0,\n        //   2 * Math.PI\n        // );\n        // ctx.fill();\n      }\n    }\n\n    this.nearestIntersection = nearestIntersection;\n\n    if (this.keys.has(\"leftClick\")) {\n      this.bulletSystem.addBullets(\n        new Bullet(\n          { x: this.startPos.x, y: this.startPos.y },\n          {\n            x: this.nearestIntersection.intersectionX,\n            y: this.nearestIntersection.intersectionY,\n          }\n        )\n      );\n\n      this.keys.delete(\"leftClick\");\n    }\n\n    this.bulletSystem.update(dt);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    if (this.startPos && this.aimPos) {\n      ctx.fillStyle = \"orange\";\n      ctx.beginPath();\n      ctx.arc(this.startPos.x, this.startPos.y, 5, 0, 2 * Math.PI);\n      ctx.fill();\n\n      if (this.nearestIntersection) {\n        if (this.nearestIntersection.intersectedRect) {\n          const { intersectedRect } = this.nearestIntersection;\n          ctx.fillStyle = \"orange\";\n          ctx.fillRect(\n            intersectedRect.sx,\n            intersectedRect.sy,\n            intersectedRect.sw,\n            intersectedRect.sh\n          );\n        }\n\n        ctx.save();\n        // draw the line\n        ctx.beginPath();\n        ctx.setLineDash([5, 15]);\n        ctx.moveTo(this.startPos.x, this.startPos.y);\n        ctx.lineTo(\n          this.nearestIntersection.intersectionX,\n          this.nearestIntersection.intersectionY\n        );\n        ctx.stroke();\n        ctx.restore();\n\n        // draw intersection dot\n        ctx.fillStyle = \"red\";\n        ctx.beginPath();\n        ctx.arc(\n          this.nearestIntersection.intersectionX,\n          this.nearestIntersection.intersectionY,\n          5,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n      }\n    }\n\n    this.bulletSystem.draw(ctx);\n  }\n\n  lineRect(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    rx: number,\n    ry: number,\n    rw: number,\n    rh: number\n  ) {\n    // check if the line has hit any of the rectangle's sides\n    // uses the Line/Line function below\n    const left = this.lineLine(x1, y1, x2, y2, rx, ry, rx, ry + rh);\n    const right = this.lineLine(x1, y1, x2, y2, rx + rw, ry, rx + rw, ry + rh);\n    const top = this.lineLine(x1, y1, x2, y2, rx, ry, rx + rw, ry);\n    const bottom = this.lineLine(x1, y1, x2, y2, rx, ry + rh, rx + rw, ry + rh);\n\n    const intersections: Array<{\n      intersectionX: number;\n      intersectionY: number;\n    }> = [];\n\n    if (left) intersections.push(left);\n    if (right) intersections.push(right);\n    if (top) intersections.push(top);\n    if (bottom) intersections.push(bottom);\n\n    return intersections;\n  }\n\n  lineLine(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    x3: number,\n    y3: number,\n    x4: number,\n    y4: number\n  ) {\n    // calculate the direction of the lines\n    const uA: number =\n      ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) /\n      ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n    const uB: number =\n      ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) /\n      ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n\n    // if uA and uB are between 0-1, lines are colliding\n    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n      // where the lines meet\n      const intersectionX: number = x1 + uA * (x2 - x1);\n      const intersectionY: number = y1 + uA * (y2 - y1);\n\n      return { intersectionX, intersectionY };\n    }\n    return null;\n  }\n}\n","import Entity from \"./Entity\";\n\nexport default class Bullet extends Entity {\n  lifeLength = 0.5; // seconds\n\n  constructor(\n    readonly startPos: { x: number; y: number },\n    readonly endPos: { x: number; y: number }\n  ) {\n    super();\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    // draw the line\n    ctx.strokeStyle = \"red\";\n    ctx.beginPath();\n    ctx.moveTo(this.startPos.x, this.startPos.y);\n    ctx.lineTo(this.endPos.x, this.endPos.y);\n    ctx.stroke();\n  }\n}\n","import Bullet from \"../Entity/Bullet\";\n\nexport default class BulletSystem {\n  bullets: Bullet[] = [];\n\n  constructor() {}\n\n  addBullets(...bullets: Bullet[]) {\n    this.bullets.push(...bullets);\n  }\n\n  update(dt: number) {\n    console.log(this.bullets);\n    this.bullets = this.bullets.filter((bullet) => bullet.lifeLength > 0);\n\n    for (const bullet of this.bullets) {\n      bullet.lifeLength -= dt;\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    for (const bullet of this.bullets) {\n      bullet.draw(ctx);\n    }\n  }\n}\n"],"names":["$4a5f60612504c761$export$2e2bcd8739ae039","constructor","$c4a2ebb6152c7bea$export$5c761481ae48d9f2","$81a81278a352112e$export$2e2bcd8739ae039","$ad61a8af9eafef66$export$2e2bcd8739ae039","x","y","size","drawX","drawY","entities","addEntity","entity","push","$f8f0a71d1ac2e862$export$e1dae5660003ffa7","appliesTo","update","dt","game","Error","draw","ctx","$bbb92fe6a838daab$export$2e2bcd8739ae039","keys","Set","document","addEventListener","e","keyCode","add","playerCell","find","cell","moveToCell","has","delete","filter","$6b28eae97cf53d15$export$2e2bcd8739ae039","startPos","endPos","lifeLength","strokeStyle","beginPath","moveTo","lineTo","stroke","$ca622784e3b66859$export$2e2bcd8739ae039","bullets","addBullets","bullet","console","log","$8720f1b93daaaf0d$export$ca8fcbfa0c11ecda","mousePos","aimPos","nearestIntersection","bulletSystem","querySelector","offsetX","offsetY","Boolean","vector","mousePosBasedMagnitude","Math","sqrt","pow","norm","magnitude","gameWidth","gameHeight","x1","y1","x2","y2","intersectionX","intersectionY","obstacleCells","sx","sy","sw","sh","intersections","lineRect","intersection","intersectionDistanceX","intersectionDistanceY","intersectionDistance","nearestIntersectionDistanceX","nearestIntersectionDistanceY","nearestIntersectionDistance","intersectedRect","fillStyle","arc","PI","fill","fillRect","save","setLineDash","restore","rx","ry","rw","rh","left","lineLine","right","top","bottom","x3","y3","x4","y4","uA","uB","$256d25c9dd37b357$export$ca664994d1d54bff","structure","systems","board","buildLevel","generatedBoard","forEach","row","rowIndex","generatedRow","obstacle","obstacleIndex","position","maximumCellSize","minimumGameSize","minimumGameSizeAxis","system","filteredEntities","flat","drawPosition","strokeRect","closePath","$2fb686134af45adc$export$2e720d0366b6ecb3","$46b0125df3b201f4$var$canvas","$46b0125df3b201f4$var$ctx","getContext","$46b0125df3b201f4$var$game","level","start","$46b0125df3b201f4$var$oldTimeStamp","requestAnimationFrame","$46b0125df3b201f4$var$gameLoop","timestamp","clearRect"],"version":3,"file":"index.f9a71465.js.map"}
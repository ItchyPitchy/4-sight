class t{constructor(){}}class e extends t{constructor(){super()}}class s extends t{constructor(){super()}}class l extends t{constructor(t,e,s,l,n){super(),this.x=t,this.y=e,this.size=s,this.drawX=l,this.drawY=n,this.entities=[]}addEntity(t){this.entities.push(t)}}class n{appliesTo(t){return!1}update(t,e,s){throw Error("not implemented")}draw(t){}}class i extends n{constructor(){super(),this.keys=new Set,document.addEventListener("keydown",t=>{switch(t.keyCode){case 87:this.keys.add("w");break;case 65:this.keys.add("a");break;case 83:this.keys.add("d");break;case 68:this.keys.add("s")}})}appliesTo(t){return t instanceof l}update(t,s,l){let n=t.find(t=>t.entities.find(t=>t instanceof e));if(!n)return;let i=null;this.keys.has("w")&&(i=t.find(t=>t.x===n.x&&t.y===n.y-1),this.keys.delete("w")),this.keys.has("a")&&(i=t.find(t=>t.x===n.x-1&&t.y===n.y),this.keys.delete("a")),this.keys.has("s")&&(i=t.find(t=>t.x===n.x+1&&t.y===n.y),this.keys.delete("s")),this.keys.has("d")&&(i=t.find(t=>t.x===n.x&&t.y===n.y+1),this.keys.delete("d")),i&&(i.addEntity(new e),n.entities=n.entities.filter(t=>!(t instanceof e)))}}class r extends t{constructor(t,e){super(),this.startPos=t,this.endPos=e,this.lifeLength=.5}draw(t){// draw the line
t.strokeStyle="red",t.beginPath(),t.moveTo(this.startPos.x,this.startPos.y),t.lineTo(this.endPos.x,this.endPos.y),t.stroke()}}class u{constructor(){this.bullets=[]}addBullets(...t){this.bullets.push(...t)}update(t){for(let e of(console.log(this.bullets),this.bullets=this.bullets.filter(t=>t.lifeLength>0),this.bullets))e.lifeLength-=t}draw(t){for(let e of this.bullets)e.draw(t)}}class o extends n{constructor(){super(),this.keys=new Set,this.mousePos=null,this.startPos=null,this.aimPos=null,this.nearestIntersection=null,this.bulletSystem=new u,document.querySelector("#gameScreen").addEventListener("click",t=>{this.keys.add("leftClick")}),document.querySelector("#gameScreen").addEventListener("mousemove",t=>{this.mousePos={x:t.offsetX,y:t.offsetY}})}appliesTo(t){return t instanceof l&&!!t.entities.find(t=>t instanceof s||t instanceof e)}update(t,l,n){let i=t.find(t=>t.entities.find(t=>t instanceof e));if(!i||(this.startPos={x:i.drawX+i.size/2,y:i.drawY+i.size/2},!this.mousePos))return;let u={x:this.mousePos.x-(i.drawX+i.size/2),y:this.mousePos.y-(i.drawY+i.size/2)},o=Math.sqrt(Math.pow(u.x,2)+Math.pow(u.y,2)),a={x:u.x/o,y:u.y/o},h={x:a.x*Math.sqrt(Math.pow(n.gameWidth,2)+Math.pow(n.gameHeight,2)),y:a.y*Math.sqrt(Math.pow(n.gameWidth,2)+Math.pow(n.gameHeight,2))};this.aimPos={x:this.startPos.x+h.x,y:this.startPos.y+h.y};let c=this.aimPos.x,d=this.aimPos.y,f=this.startPos.x,y=this.startPos.y,w={intersectionX:c,intersectionY:d},x=t.filter(t=>t.entities.find(t=>t instanceof s));// points for line (controlled by mouse)
for(let t of x){let e=t.drawX,s=t.drawY,l=t.size,n=t.size,i=this.lineRect(c,d,f,y,e,s,l,n);// square position
for(let t of i){let i=t.intersectionX-f,r=t.intersectionY-y,u=Math.sqrt(Math.pow(i,2)+Math.pow(r,2)),o=w.intersectionX-f,a=w.intersectionY-y,h=Math.sqrt(Math.pow(o,2)+Math.pow(a,2));u<h&&(w={intersectionX:t.intersectionX,intersectionY:t.intersectionY,intersectedRect:{sx:e,sy:s,sw:l,sh:n}});// ctx.fillStyle = "blue";
// ctx.beginPath();
// ctx.arc(
//   intersection.intersectionX,
//   intersection.intersectionY,
//   5,
//   0,
//   2 * Math.PI
// );
// ctx.fill();
}}this.nearestIntersection=w,this.keys.has("leftClick")&&(this.bulletSystem.addBullets(new r({x:this.startPos.x,y:this.startPos.y},{x:this.nearestIntersection.intersectionX,y:this.nearestIntersection.intersectionY})),this.keys.delete("leftClick")),this.bulletSystem.update(l)}draw(t){if(this.startPos&&this.aimPos&&(t.fillStyle="orange",t.beginPath(),t.arc(this.startPos.x,this.startPos.y,5,0,2*Math.PI),t.fill(),this.nearestIntersection)){if(this.nearestIntersection.intersectedRect){let{intersectedRect:e}=this.nearestIntersection;t.fillStyle="orange",t.fillRect(e.sx,e.sy,e.sw,e.sh)}t.save(),// draw the line
t.beginPath(),t.setLineDash([5,15]),t.moveTo(this.startPos.x,this.startPos.y),t.lineTo(this.nearestIntersection.intersectionX,this.nearestIntersection.intersectionY),t.stroke(),t.restore(),// draw intersection dot
t.fillStyle="red",t.beginPath(),t.arc(this.nearestIntersection.intersectionX,this.nearestIntersection.intersectionY,5,0,2*Math.PI),t.fill()}this.bulletSystem.draw(t)}lineRect(t,e,s,l,n,i,r,u){// check if the line has hit any of the rectangle's sides
// uses the Line/Line function below
let o=this.lineLine(t,e,s,l,n,i,n,i+u),a=this.lineLine(t,e,s,l,n+r,i,n+r,i+u),h=this.lineLine(t,e,s,l,n,i,n+r,i),c=this.lineLine(t,e,s,l,n,i+u,n+r,i+u),d=[];return o&&d.push(o),a&&d.push(a),h&&d.push(h),c&&d.push(c),d}lineLine(t,e,s,l,n,i,r,u){// calculate the direction of the lines
let o=((r-n)*(e-i)-(u-i)*(t-n))/((u-i)*(s-t)-(r-n)*(l-e)),a=((s-t)*(e-i)-(l-e)*(t-n))/((u-i)*(s-t)-(r-n)*(l-e));return(// if uA and uB are between 0-1, lines are colliding
o>=0&&o<=1&&a>=0&&a<=1?{intersectionX:t+o*(s-t),intersectionY:e+o*(l-e)}:null)}}class a{constructor(t){this.structure=t,this.systems=[new o,new i],this.board=null,this.offsetX=0,this.offsetY=0}buildLevel(t,e){let s=[];this.structure.forEach((n,i)=>{let r=[];n.forEach((s,n)=>{let u={x:n,y:i},o=("x"==(t<e?"x":"y")?t:e)/15,a=new l(u.x,u.y,o,o*u.x,o*u.y);null!==s&&(a.entities=[...a.entities,...s]),r.push(a)}),s.push(r)}),this.board=s}update(t,e){if(this.board)for(let s of this.systems){let l=this.board.flat().filter(s.appliesTo);s.update(l,t,e)}}draw(t){if(this.board){for(let l of this.board)for(let n of l){let l={x:n.drawX,y:n.drawY};t.beginPath(),n.entities.find(t=>t instanceof s)?(t.fillStyle="#000",t.fillRect(l.x,l.y,n.size,n.size),t.fill()):n.entities.find(t=>t instanceof e)?(t.fillStyle="#543",t.fillRect(l.x,l.y,n.size,n.size),t.fill()):(t.strokeStyle="#000",t.strokeRect(l.x,l.y,n.size,n.size),t.stroke()),t.closePath()}for(let e of this.systems)e.draw(t)}}}class h extends a{constructor(){let t=[[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],[null,null,[new s],null,null,null,null,null,null,null,null,null,[new s],null,null],[null,null,[new s],null,null,[new s],[new s],[new s],[new s],[new s],null,null,[new s],null,null],[null,null,[new s],null,null,null,null,null,null,null,null,null,[new s],null,null],[null,null,[new s],null,null,null,null,null,null,null,null,null,[new s],null,null],[null,null,[new s],null,null,[new s],[new s],[new s],[new s],[new s],null,null,[new s],null,null],[null,null,[new s],null,null,null,null,null,null,null,null,null,[new s],null,null],[null,null,null,null,null,null,null,[new e],null,null,null,null,null,null,null]];super(t)}}const c=document.querySelector("#gameScreen"),d=c.getContext("2d"),f=new class{constructor(t,e,s){this.gameWidth=t,this.gameHeight=e,this.ctx=s,this.level=new h,this.systems=[],this.entities=[],this.start()}start(){this.level.buildLevel(this.gameWidth,this.gameHeight)}draw(t){for(let e of(this.level.draw(t),this.systems))e.draw(t)}update(t){for(let e of(this.level.board&&this.level.update(t,this),this.systems)){let s=this.entities.filter(e.appliesTo);e.update(s,t,this)}}}(800,800,d);let y=0;requestAnimationFrame(function t(e){// dt i sekunder
let s=(e-y)/1e3;y=e,d.clearRect(0,0,800,800),f.update(s),f.draw(d),requestAnimationFrame(t)});//# sourceMappingURL=index.f9a71465.js.map

//# sourceMappingURL=index.f9a71465.js.map

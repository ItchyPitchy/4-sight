{"mappings":"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","sources":["src/main.ts","src/game.ts","src/Level/Level1.ts","src/Entity/Player1.ts","src/Entity/Entity.ts","src/Entity/Wall.ts","src/Level/Level.ts","src/System/MoveSystem.ts","src/Level/Cell.ts","src/System/System.ts","src/System/ShootSystem.ts","src/Entity/Bullet.ts","src/System/BulletSystem.ts"],"sourcesContent":["import Game from \"./game\";\n\nconst canvas = document.querySelector(\"#gameScreen\") as HTMLCanvasElement;\nconst ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n// ctx.imageSmoothingEnabled = true;\n// ctx.imageSmoothingQuality = \"high\";\n\nconst GAME_WIDTH = 800;\nconst GAME_HEIGHT = 800;\n\nconst game = new Game(GAME_WIDTH, GAME_HEIGHT, ctx);\n\nlet oldTimeStamp: number = 0;\n\nfunction gameLoop(timestamp: number) {\n  // dt i sekunder\n  let dt = (timestamp - oldTimeStamp) / 1000;\n  oldTimeStamp = timestamp;\n\n  ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n\n  game.update(dt);\n  game.draw(ctx);\n\n  requestAnimationFrame(gameLoop);\n}\n\nrequestAnimationFrame(gameLoop);\n","import Entity from \"./Entity/Entity\";\nimport { Level1 } from \"./Level/Level1\";\nimport { System } from \"./System/System\";\n\nexport default class Game {\n  level = new Level1();\n  systems: System[] = [];\n  entities: Entity[] = [];\n\n  constructor(\n    readonly gameWidth: number,\n    readonly gameHeight: number,\n    readonly ctx: CanvasRenderingContext2D\n  ) {\n    this.start();\n  }\n\n  start() {\n    this.level.buildLevel(this.gameWidth, this.gameHeight);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    this.level.draw(ctx);\n\n    for (const system of this.systems) {\n      system.draw(ctx);\n    }\n  }\n\n  update(dt: number) {\n    if (this.level.board) this.level.update(dt, this);\n\n    for (const system of this.systems) {\n      const filteredEntities = this.entities.filter(system.appliesTo);\n      system.update(filteredEntities, dt, this);\n    }\n  }\n}\n","import { Player1 } from \"../Entity/Player1\";\nimport Wall from \"../Entity/Wall\";\nimport { Level } from \"./Level\";\n\nexport class Level1 extends Level {\n  constructor() {\n    const structure = [\n      [\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n      ],\n      [\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n      ],\n      [\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n        [new Wall()],\n        [new Wall()],\n        [new Wall()],\n        [new Wall()],\n        [new Wall()],\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n      ],\n      [\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n      ],\n      [\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n      ],\n      [\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n        [new Wall()],\n        [new Wall()],\n        [new Wall()],\n        [new Wall()],\n        [new Wall()],\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n      ],\n      [\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        [new Wall()],\n        null,\n        null,\n      ],\n      [\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        [new Player1()],\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n        null,\n      ],\n    ];\n\n    super(structure);\n  }\n}\n","import Entity from \"./Entity\";\n\nexport class Player1 extends Entity {\n  constructor() {\n    super();\n  }\n}\n","export default class Entity {\n  constructor() {}\n}\n","import Entity from \"./Entity\";\n\nexport default class Wall extends Entity {\n  constructor() {\n    super();\n  }\n}\n","import Entity from \"../Entity/Entity\";\nimport { Player1 } from \"../Entity/Player1\";\nimport Wall from \"../Entity/Wall\";\nimport MoveSystem from \"../System/MoveSystem\";\nimport { ShootSystem } from \"../System/ShootSystem\";\nimport { System } from \"../System/System\";\nimport Game from \"../game\";\nimport Cell from \"./Cell\";\n\ntype Board = Array<Array<Cell>>;\n\nexport class Level {\n  systems: System[] = [new ShootSystem(), new MoveSystem()];\n  board: Board | null = null;\n  offsetX = 0;\n  offsetY = 0;\n\n  constructor(readonly structure: Array<Array<Entity[] | null>>) {}\n\n  buildLevel(gameWidth: number, gameHeight: number) {\n    const generatedBoard: Board = [];\n\n    this.structure.forEach((row, rowIndex) => {\n      const generatedRow: Cell[] = [];\n\n      row.forEach((obstacle, obstacleIndex) => {\n        const position = {\n          x: obstacleIndex,\n          y: rowIndex,\n        };\n\n        const minimumGameSizeAxis = gameWidth < gameHeight ? \"x\" : \"y\";\n        const minimumGameSize =\n          minimumGameSizeAxis === \"x\" ? gameWidth : gameHeight;\n\n        const maximumBoardSizeAxis = \"x\";\n        const maximumBoardSize = 15; // Don't hardcode this!!!\n        const maximumCellSize = minimumGameSize / maximumBoardSize;\n\n        const cell = new Cell(\n          position.x,\n          position.y,\n          maximumCellSize,\n          maximumCellSize * position.x,\n          maximumCellSize * position.y\n        );\n\n        if (obstacle !== null) {\n          cell.entities = [...cell.entities, ...obstacle];\n        }\n\n        generatedRow.push(cell);\n      });\n\n      generatedBoard.push(generatedRow);\n    });\n\n    this.board = generatedBoard;\n  }\n\n  update(dt: number, game: Game) {\n    if (!this.board) return;\n\n    for (const system of this.systems) {\n      const filteredEntities = this.board.flat().filter(system.appliesTo);\n      system.update(filteredEntities, dt, game);\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    if (!this.board) return;\n\n    for (const row of this.board) {\n      for (const cell of row) {\n        const drawPosition = {\n          x: cell.drawX,\n          y: cell.drawY,\n        };\n\n        ctx.beginPath();\n\n        if (cell.entities.find((entity) => entity instanceof Wall)) {\n          ctx.fillStyle = \"#000\";\n          ctx.fillRect(drawPosition.x, drawPosition.y, cell.size, cell.size);\n          ctx.fill();\n        } else if (cell.entities.find((entity) => entity instanceof Player1)) {\n          ctx.fillStyle = \"#543\";\n          ctx.fillRect(drawPosition.x, drawPosition.y, cell.size, cell.size);\n          ctx.fill();\n        } else {\n          ctx.strokeStyle = \"#000\";\n          ctx.strokeRect(drawPosition.x, drawPosition.y, cell.size, cell.size);\n          ctx.stroke();\n        }\n\n        ctx.closePath();\n      }\n    }\n\n    for (const system of this.systems) {\n      system.draw(ctx);\n    }\n  }\n}\n","import Entity from \"../Entity/Entity\";\nimport { Player1 } from \"../Entity/Player1\";\nimport Cell from \"../Level/Cell\";\nimport Game from \"../game\";\nimport { System } from \"./System\";\n\nexport default class MoveSystem extends System {\n  keys = new Set<\"w\" | \"a\" | \"s\" | \"d\">();\n\n  constructor() {\n    super();\n\n    document.addEventListener(\"keydown\", (e) => {\n      switch (e.keyCode) {\n        case 87:\n          this.keys.add(\"w\");\n          break;\n        case 65:\n          this.keys.add(\"a\");\n          break;\n        case 83:\n          this.keys.add(\"d\");\n          break;\n        case 68:\n          this.keys.add(\"s\");\n          break;\n      }\n    });\n  }\n\n  appliesTo(entity: Entity) {\n    return entity instanceof Cell;\n  }\n\n  update(entities: Cell[], dt: number, game: Game) {\n    const playerCell = entities.find((cell) =>\n      cell.entities.find((entity) => entity instanceof Player1)\n    );\n\n    if (!playerCell) return;\n\n    let moveToCell: Cell | undefined | null = null;\n\n    if (this.keys.has(\"w\")) {\n      moveToCell = entities.find(\n        (cell) => cell.x === playerCell.x && cell.y === playerCell.y - 1\n      );\n\n      this.keys.delete(\"w\");\n    }\n\n    if (this.keys.has(\"a\")) {\n      moveToCell = entities.find(\n        (cell) => cell.x === playerCell.x - 1 && cell.y === playerCell.y\n      );\n\n      this.keys.delete(\"a\");\n    }\n\n    if (this.keys.has(\"s\")) {\n      moveToCell = entities.find(\n        (cell) => cell.x === playerCell.x + 1 && cell.y === playerCell.y\n      );\n\n      this.keys.delete(\"s\");\n    }\n\n    if (this.keys.has(\"d\")) {\n      moveToCell = entities.find(\n        (cell) => cell.x === playerCell.x && cell.y === playerCell.y + 1\n      );\n\n      this.keys.delete(\"d\");\n    }\n\n    if (moveToCell) {\n      moveToCell.addEntity(new Player1());\n      playerCell.entities = playerCell.entities.filter(\n        (entity) => !(entity instanceof Player1)\n      );\n    }\n  }\n}\n","import Entity from \"../Entity/Entity\";\n\nexport default class Cell extends Entity {\n  entities: Entity[] = [];\n\n  constructor(\n    readonly x: number,\n    readonly y: number,\n    readonly size: number,\n    readonly drawX: number,\n    readonly drawY: number\n  ) {\n    super();\n  }\n\n  addEntity(entity: Entity) {\n    this.entities.push(entity);\n  }\n}\n","import Entity from \"../Entity/Entity\";\nimport Game from \"../game\";\n\nexport class System {\n  appliesTo(entity: Entity) {\n    return false;\n  }\n\n  update(entities: Entity[], dt: number, game: Game) {\n    throw new Error(\"not implemented\");\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {}\n}\n","import Bullet from \"../Entity/Bullet\";\nimport Entity from \"../Entity/Entity\";\nimport { Player1 } from \"../Entity/Player1\";\nimport Wall from \"../Entity/Wall\";\nimport Cell from \"../Level/Cell\";\nimport Game from \"../game\";\nimport BulletSystem from \"./BulletSystem\";\nimport { System } from \"./System\";\n\nexport class ShootSystem extends System {\n  keys = new Set<\"leftClick\">();\n  mousePos: { x: number; y: number } | null = null;\n  startPos: { x: number; y: number } | null = null;\n  aimPos: { x: number; y: number } | null = null;\n  nearestIntersection: {\n    intersectionX: number;\n    intersectionY: number;\n    intersectedRect?: {\n      sx: number;\n      sy: number;\n      sw: number;\n      sh: number;\n    };\n  } | null = null;\n  bulletSystem = new BulletSystem();\n\n  constructor() {\n    super();\n\n    (\n      document.querySelector(\"#gameScreen\") as HTMLCanvasElement\n    ).addEventListener(\"click\", (e) => {\n      this.keys.add(\"leftClick\");\n    });\n\n    (\n      document.querySelector(\"#gameScreen\") as HTMLCanvasElement\n    ).addEventListener(\"mousemove\", (e) => {\n      this.mousePos = {\n        x: e.offsetX,\n        y: e.offsetY,\n      };\n    });\n  }\n\n  appliesTo(entity: Entity) {\n    return (\n      entity instanceof Cell &&\n      Boolean(\n        entity.entities.find(\n          (entity) => entity instanceof Wall || entity instanceof Player1\n        )\n      )\n    );\n  }\n\n  update(entities: Cell[], dt: number, game: Game) {\n    const playerCell = entities.find((cell) =>\n      cell.entities.find((entity) => entity instanceof Player1)\n    );\n\n    if (!playerCell) return;\n\n    this.startPos = {\n      x: playerCell.drawX + playerCell.size / 2,\n      y: playerCell.drawY + playerCell.size / 2,\n    };\n\n    if (!this.mousePos) return;\n\n    const vector = {\n      x: this.mousePos.x - (playerCell.drawX + playerCell.size / 2),\n      y: this.mousePos.y - (playerCell.drawY + playerCell.size / 2),\n    };\n    const mousePosBasedMagnitude = Math.sqrt(\n      Math.pow(vector.x, 2) + Math.pow(vector.y, 2)\n    );\n    const norm = {\n      x: vector.x / mousePosBasedMagnitude,\n      y: vector.y / mousePosBasedMagnitude,\n    };\n\n    const magnitude = {\n      x:\n        norm.x *\n        Math.sqrt(Math.pow(game.gameWidth, 2) + Math.pow(game.gameHeight, 2)),\n      y:\n        norm.y *\n        Math.sqrt(Math.pow(game.gameWidth, 2) + Math.pow(game.gameHeight, 2)),\n    };\n\n    this.aimPos = {\n      x: this.startPos.x + magnitude.x,\n      y: this.startPos.y + magnitude.y,\n    };\n\n    const x1: number = this.aimPos.x; // points for line (controlled by mouse)\n    const y1: number = this.aimPos.y;\n    const x2: number = this.startPos.x; // static point\n    const y2: number = this.startPos.y;\n\n    let nearestIntersection: {\n      intersectionX: number;\n      intersectionY: number;\n      intersectedRect?: {\n        sx: number;\n        sy: number;\n        sw: number;\n        sh: number;\n      };\n    } = {\n      intersectionX: x1,\n      intersectionY: y1,\n    };\n\n    const obstacleCells = entities.filter((cell) =>\n      cell.entities.find((entity) => entity instanceof Wall)\n    );\n\n    for (const cell of obstacleCells) {\n      const sx: number = cell.drawX; // square position\n      const sy: number = cell.drawY;\n      const sw: number = cell.size; // and size\n      const sh: number = cell.size;\n\n      // check if line has hit the square\n      // if so, change the fill color\n      const intersections = this.lineRect(x1, y1, x2, y2, sx, sy, sw, sh);\n\n      for (const intersection of intersections) {\n        const intersectionDistanceX = intersection.intersectionX - x2;\n        const intersectionDistanceY = intersection.intersectionY - y2;\n        const intersectionDistance = Math.sqrt(\n          Math.pow(intersectionDistanceX, 2) +\n            Math.pow(intersectionDistanceY, 2)\n        );\n\n        const nearestIntersectionDistanceX =\n          nearestIntersection.intersectionX - x2;\n        const nearestIntersectionDistanceY =\n          nearestIntersection.intersectionY - y2;\n        const nearestIntersectionDistance = Math.sqrt(\n          Math.pow(nearestIntersectionDistanceX, 2) +\n            Math.pow(nearestIntersectionDistanceY, 2)\n        );\n\n        if (intersectionDistance < nearestIntersectionDistance) {\n          nearestIntersection = {\n            intersectionX: intersection.intersectionX,\n            intersectionY: intersection.intersectionY,\n            intersectedRect: {\n              sx,\n              sy,\n              sw,\n              sh,\n            },\n          };\n        }\n\n        // ctx.fillStyle = \"blue\";\n        // ctx.beginPath();\n        // ctx.arc(\n        //   intersection.intersectionX,\n        //   intersection.intersectionY,\n        //   5,\n        //   0,\n        //   2 * Math.PI\n        // );\n        // ctx.fill();\n      }\n    }\n\n    this.nearestIntersection = nearestIntersection;\n\n    if (this.keys.has(\"leftClick\")) {\n      this.bulletSystem.addBullets(\n        new Bullet(\n          { x: this.startPos.x, y: this.startPos.y },\n          {\n            x: this.nearestIntersection.intersectionX,\n            y: this.nearestIntersection.intersectionY,\n          }\n        )\n      );\n\n      this.keys.delete(\"leftClick\");\n    }\n\n    this.bulletSystem.update(dt);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    if (this.startPos && this.aimPos) {\n      ctx.fillStyle = \"orange\";\n      ctx.beginPath();\n      ctx.arc(this.startPos.x, this.startPos.y, 5, 0, 2 * Math.PI);\n      ctx.fill();\n\n      if (this.nearestIntersection) {\n        if (this.nearestIntersection.intersectedRect) {\n          const { intersectedRect } = this.nearestIntersection;\n          ctx.fillStyle = \"orange\";\n          ctx.fillRect(\n            intersectedRect.sx,\n            intersectedRect.sy,\n            intersectedRect.sw,\n            intersectedRect.sh\n          );\n        }\n\n        ctx.save();\n        // draw the line\n        ctx.beginPath();\n        ctx.setLineDash([5, 15]);\n        ctx.moveTo(this.startPos.x, this.startPos.y);\n        ctx.lineTo(\n          this.nearestIntersection.intersectionX,\n          this.nearestIntersection.intersectionY\n        );\n        ctx.stroke();\n        ctx.restore();\n\n        // draw intersection dot\n        ctx.fillStyle = \"red\";\n        ctx.beginPath();\n        ctx.arc(\n          this.nearestIntersection.intersectionX,\n          this.nearestIntersection.intersectionY,\n          5,\n          0,\n          2 * Math.PI\n        );\n        ctx.fill();\n      }\n    }\n\n    this.bulletSystem.draw(ctx);\n  }\n\n  lineRect(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    rx: number,\n    ry: number,\n    rw: number,\n    rh: number\n  ) {\n    // check if the line has hit any of the rectangle's sides\n    // uses the Line/Line function below\n    const left = this.lineLine(x1, y1, x2, y2, rx, ry, rx, ry + rh);\n    const right = this.lineLine(x1, y1, x2, y2, rx + rw, ry, rx + rw, ry + rh);\n    const top = this.lineLine(x1, y1, x2, y2, rx, ry, rx + rw, ry);\n    const bottom = this.lineLine(x1, y1, x2, y2, rx, ry + rh, rx + rw, ry + rh);\n\n    const intersections: Array<{\n      intersectionX: number;\n      intersectionY: number;\n    }> = [];\n\n    if (left) intersections.push(left);\n    if (right) intersections.push(right);\n    if (top) intersections.push(top);\n    if (bottom) intersections.push(bottom);\n\n    return intersections;\n  }\n\n  lineLine(\n    x1: number,\n    y1: number,\n    x2: number,\n    y2: number,\n    x3: number,\n    y3: number,\n    x4: number,\n    y4: number\n  ) {\n    // calculate the direction of the lines\n    const uA: number =\n      ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) /\n      ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n    const uB: number =\n      ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) /\n      ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));\n\n    // if uA and uB are between 0-1, lines are colliding\n    if (uA >= 0 && uA <= 1 && uB >= 0 && uB <= 1) {\n      // where the lines meet\n      const intersectionX: number = x1 + uA * (x2 - x1);\n      const intersectionY: number = y1 + uA * (y2 - y1);\n\n      return { intersectionX, intersectionY };\n    }\n    return null;\n  }\n}\n","import Entity from \"./Entity\";\n\nexport default class Bullet extends Entity {\n  lifeLength = 0.5; // seconds\n\n  constructor(\n    readonly startPos: { x: number; y: number },\n    readonly endPos: { x: number; y: number }\n  ) {\n    super();\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    // draw the line\n    ctx.strokeStyle = \"red\";\n    ctx.beginPath();\n    ctx.moveTo(this.startPos.x, this.startPos.y);\n    ctx.lineTo(this.endPos.x, this.endPos.y);\n    ctx.stroke();\n  }\n}\n","import Bullet from \"../Entity/Bullet\";\n\nexport default class BulletSystem {\n  bullets: Bullet[] = [];\n\n  constructor() {}\n\n  addBullets(...bullets: Bullet[]) {\n    this.bullets.push(...bullets);\n  }\n\n  update(dt: number) {\n    console.log(this.bullets);\n    this.bullets = this.bullets.filter((bullet) => bullet.lifeLength > 0);\n\n    for (const bullet of this.bullets) {\n      bullet.lifeLength -= dt;\n    }\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    for (const bullet of this.bullets) {\n      bullet.draw(ctx);\n    }\n  }\n}\n"],"names":[],"version":3,"file":"index.js.map"}